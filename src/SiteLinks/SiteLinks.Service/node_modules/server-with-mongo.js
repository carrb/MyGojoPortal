/* server-with-mongo.js - Node Module 

   See: Mongoose Helpers
        https://github.com/tblobaum/mongoose-troop
        Mongoose-Auth
        http://raquelvelez.com/blog/2012/03/transitioning-from-mongoose-auth-to-passport/
        Better is Passport
        http://passportjs.org/
        http://passportjs.org/guide/
        https://github.com/Turbo87/locomotive-passport-boilerplate



 */


var mongoose = require('mongoose');
// connect with auth ex: mongodb://fred:foobar@localhost/baz
var db = mongoose.connect('mongodb://localhost/TasksDB');
var Schema = mongoose.Schema;

var Tasks = new Schema({
    project: String,
    description: String
});

var tasksModel = mongoose.model('Task', Tasks);



exports.TasksDb = function() {};

exports.TasksDb.prototype = {
    add: function(taskData, cb) {
        var task = new tasksModel();  
        task.project = taskData.project;
        task.description = taskData.description;  

        task.save(function(err) {
            if(err) throw err;
        });
    },

    get: function(options, cb) {
        options.skip = options.skip || 0;
        options.limit = options.limit || 100;

        var tasks = [];
        tasksModel.find({})
                  .skip(options.skip)
                  .limit(options.limit)
                  .exec(function (err, tasks) {
                      cb(err, tasks);
                  });
    },

    deleteAll: function(cb) {
        this.get({}, function(err, tasks) {
            for (var index in tasks) {
                tasks[index].remove();
            }

            cb();
        });
    },

    close: function() {
        db.disconnect();
    },

    unfinished: function(db) {
        this.get({}, function(err, tasks) {
            cb(Tasks.length > 0);
        });
    }

};


/*

function listTasks() {
    tasksModel.find({}, function(err, docs) {
        if(err) throw err;

        docs.forEach(function(doc) {
            console.log(typeof doc + ": " + doc + "\n");
        });

        //docs.forEach


    });
}

function findFirst() {
    tasksModel.find({ 'project': 'First Project' }).each(function(err, task) {
        if(task != null) {
            console.log('ID:' + task._id);
            console.log(task.description);
        }
    });
}

function updateFirst() {
    tasksModel.update({ 'project': 'First Project' },
                        { 'description': 'This is the first description.' },
                        { multi: false },
                        function(err, rows_updated) {
                            if(err) throw err;
                            console.log('Updated.');
                        });
}

*/

/*
function getTasks(file, cb) {
    path.exists(file, function(exists) {
        var tasks = [];

        if(exists) {
            fs.readFile(file, 'utf8', function(err, datum) {
                if(err) throw err;
                var data = datum.toString();
                var tasks = JSON.parse(data);
                cb(tasks);
            });
        } else {
            cb([]);
        }
    });
}

function listTasks(file) {
    getTasks(file, function(tasks) {
        for(var i in tasks) {
            console.log(tasks[i]);
        }
    });
}


function storeTasks(file, tasks) {
    fs.writeFile(file, JSON.stringify(tasks), 'utf8', function(err) {
        if (err) throw err;
        console.log('Saved.');
    });
}



*/