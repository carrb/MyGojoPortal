
var argv = require('optimist').argv;
var mongoose = require('mongoose');
var command = argv.command;
var taskProject = argv.project;
var taskDescription = argv.desc;

var db = mongoose.connect('mongodb://localhost/TasksDB');

var Schema = mongoose.Schema;
var Tasks = new Schema({
    project: String,
    description: String
});

var tasksModel = mongoose.model('Task', Tasks);



switch(command) {
    case 'list':
        listTasks();
        break;

    case 'add':
        addTask(taskProject, taskDescription);
        break;

    case 'findFirst':
        findFirst();
        break;

    case 'updateFirst':
        updateFirst();
        break;

    default:
        console.log('Usage: ' + process.argv[0] + '--command list|add --project [taskProject] --desc [taskDescription]');
}


exports.TasksDb = function() {};

exports.TasksDb.prototype = {
    add: function(taskData, cb) {
        var task = new tasksModel();  
        task.project = taskData.project;
        task.description = taskData.description;  

        task.save(function(err) {
            if(err) throw err;
        });
    },

    listAll: function(cb) {
        this.get({}, function(err, tasks) {
            // look over 
        });
    },



}

function addTask(taskProject, taskDescription) {
    var task = new tasksModel();
    task.project = taskProject;
    task.description = taskDescription;

    task.save(function(err) {
        if(err) throw err;
        console.log('Task saved!');
    });
}

function listTasks() {
    tasksModel.find({}, function(err, docs) {
        if(err) throw err;

        docs.forEach(function(doc) {
            console.log(typeof doc + ": " + doc + "\n");
        });

        //docs.forEach


    });
}

function findFirst() {
    tasksModel.find({ 'project': 'First Project' }).each(function(err, task) {
        if(task != null) {
            console.log('ID:' + task._id);
            console.log(task.description);
        }
    });
}

function updateFirst() {
    tasksModel.update({ 'project': 'First Project' },
                        { 'description': 'This is the first description.' },
                        { multi: false },
                        function(err, rows_updated) {
                            if(err) throw err;
                            console.log('Updated.');
                        });
}



/*
function getTasks(file, cb) {
    path.exists(file, function(exists) {
        var tasks = [];

        if(exists) {
            fs.readFile(file, 'utf8', function(err, datum) {
                if(err) throw err;
                var data = datum.toString();
                var tasks = JSON.parse(data);
                cb(tasks);
            });
        } else {
            cb([]);
        }
    });
}

function listTasks(file) {
    getTasks(file, function(tasks) {
        for(var i in tasks) {
            console.log(tasks[i]);
        }
    });
}


function storeTasks(file, tasks) {
    fs.writeFile(file, JSON.stringify(tasks), 'utf8', function(err) {
        if (err) throw err;
        console.log('Saved.');
    });
}



*/